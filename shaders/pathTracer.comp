#version 460

#extension GL_ARB_separate_shader_objects : enable

#if ( USE_NATIVE_FP64 == TRUE )
	#extension GL_ARB_gpu_shader_int64 : enable
	#extension GL_ARB_gpu_shader_fp64 : enable
#endif

// seems to be ignored!
#pragma optimize(off)
#pragma debug(on)

#pragma optionNV(fastmath off)
#pragma optionNV(fastprecision off)


precision highp int;
precision highp float;

//https://www.shadertoy.com/view/3tdcRr
//https://www.shadertoy.com/view/4lfcDr
/*
    void
    mainImage(out vec4 fragColor, in vec2 fragCoord)
    {

        fragColor = vec4(0.5, 0.0, 0.0, 1.0);
    }
*/



// preprocess with 'glslc -E' before compiling into spir-v
//!!! 
#include "emulateDouble.h.glsl"

// struct Pixel{
//   vec4 value;
// };
// layout(std140, binding = 0) buffer buf
// {
//    Pixel imageData[];
// };

layout(local_size_x = 16, local_size_y = 16) in;

// # object types; unfortunately no support for enums
#define ePlane      0
#define eSphere     1
#define eMesh       2

// # material types
#define eDiffuseMaterial        1
#define eReflectiveMaterial     2
#define eRefractiveMaterial     3

struct Ray { vec3 o; vec3 d; };
struct Plane { vec4 equation; vec4 e; vec4 c; };
struct Sphere { vec4 geo; vec4 e; vec4 c; };

struct HitInfo { 
    float   rayT;
    int     objType; 
    int     objIdx; 
    //uint optTriIdx; 
    //float3 optN; 
    //float2 optTC; 
};

layout(std430, binding = 0) buffer b1 { vec4 accRad[]; };
layout(std430, binding = 1) buffer planeBuf { Plane planes[]; };
layout(std430, binding = 2) buffer sphereBuf { Sphere spheres[]; };

//uniform uvec2 imgdim, samps;            // image dimensions and sample count

// https://www.reddit.com/r/vulkan/comments/7te7ac/question_uniforms_in_glsl_under_vulkan_semantics/
//layout(push_constant, std430) uniform PushConstants { vec4 theMember; } 
layout(push_constant, std430) uniform PushConstants { uvec2 k_imgdim; uvec2 k_samps; } pushConstants;
// struct TheStruct
// {
//     vec4 theMember;
// };
// layout(set=0, binding = 0) uniform TheBlock
// {
//     TheStruct the_struct;
// };

// float spheres[] = {  // center.xyz, radius  |  emmission.xyz, 0  |  color.rgb, refltype     
//     1e5 - 2.6, 0, 0, 1e5,   0, 0, 0, 0,  .85, .25, .25,  1, // Left (DIFFUSE)
//     1e5 + 2.6, 0, 0, 1e5,   0, 0, 0, 0,  .25, .35, .85,  1, // Right
//     0, 1e5 + 2, 0, 1e5,     0, 0, 0, 0,  .75, .75, .75,  1, // Top
//     0,-1e5 - 2, 0, 1e5,     0, 0, 0, 0,  .75, .75, .75,  1, // Bottom
//     0, 0, -1e5 - 2.8, 1e5,  0, 0, 0, 0,  .85, .85, .25,  1, // Back 
//     0, 0, 1e5 + 7.9, 1e5,   0, 0, 0, 0,  0.1, 0.7, 0.7,  1, // Front
//     -1.3, -1.2, -1.3, 0.8,  0, 0, 0, 0,  .999,.999,.999, 2, // REFLECTIVE
//     1.3, -1.2, -0.2, 0.8,   0, 0, 0, 0,  .999,.999,.999, 3, // REFRACTIVE
//     0, 2*0.8, 0, 0.2,       100,100,100,0,  0, 0, 0,   1, // Light
// };


const float pi = 3.141592653589793;
const float eps = 1e-4;
const float triEps = 1e-7f;
const float inf = 1e20;

vec3 rand01(uvec3 x){                   // pseudo-random number generator
    for (int i=3; i-->0;) x = ((x>>8U)^x.yzx)*1103515245U;
    return vec3(x)*(1.0/float(0xffffffffU));
}

bool intersect(Ray ray, out HitInfo hitInfo /*out int id, out highp vec3 x, out highp vec3 n*/) {
    highp float d;
    highp float t = inf;   // intersect ray with scene

    for ( int i = 0; i < planes.length(); i++ ) { //PLANES
        Plane planeData = planes[ i ];
        float denom = dot( ray.d, planeData.equation.xyz );
        if ( denom > triEps ) {
            d = ( planeData.equation.w - dot( ray.o, planeData.equation.xyz ) ) / denom ;
            if ( d < t ) {
                t = d; hitInfo.objType = ePlane; hitInfo.objIdx = i; //hitInfo.optN = planeData.plane.xyz;
            }
        }
    }

    for ( int i = 0; i < spheres.length(); i++ ) { 
        Sphere sphere = spheres[i];                  

        const float maxLenForFloatCalc = 500.0f;
        //const float maxLenForFloatCalc = 40000.0f;
    #if ( USE_NATIVE_FP64 == TRUE ) // => perform intersection test in double precision NOTE: won't work on MacOS over Vulkan->MoltenVK->Metal
        // need double precision?
        if ( sphere.geo.w > maxLenForFloatCalc || 
            dot( sphere.geo.xyz, sphere.geo.xyz ) > maxLenForFloatCalc * maxLenForFloatCalc ||
            dot( ray.o, ray.o ) > maxLenForFloatCalc * maxLenForFloatCalc ||
            dot( sphere.geo.xyz - ray.o, sphere.geo.xyz - ray.o ) > maxLenForFloatCalc * maxLenForFloatCalc ) {
    
            dvec3 oc = dvec3(sphere.geo.xyz) - ray.o;      // Solve t^2*d.d + 2*t*(o-s).d + (o-s).(o-s)-r^2 = 0 
            double b=dot(oc,ray.d), det=b*b-dot(oc,oc)+sphere.geo.w*sphere.geo.w; 
            if (det < 0) continue; else det=sqrt(det); 
            d = (d = float(b-det))>eps ? d : ((d=float(b+det))>eps ? d : inf);
        } else
    #elif ( DS_f32_f32 == TRUE )
        // need double precision?
        if ( sphere.geo.w > maxLenForFloatCalc || 
            dot( sphere.geo.xyz, sphere.geo.xyz ) > maxLenForFloatCalc * maxLenForFloatCalc ||
            dot( ray.o, ray.o ) > maxLenForFloatCalc * maxLenForFloatCalc ||
            dot( sphere.geo.xyz - ray.o, sphere.geo.xyz - ray.o ) > maxLenForFloatCalc * maxLenForFloatCalc ) {

            vec2 sGeoX_ds = ds_set( sphere.geo.x );
            vec2 sGeoY_ds = ds_set( sphere.geo.y );
            vec2 sGeoZ_ds = ds_set( sphere.geo.z );

            vec2 neg_roX_ds = ds_set( -ray.o.x );
            vec2 neg_roY_ds = ds_set( -ray.o.y );
            vec2 neg_roZ_ds = ds_set( -ray.o.z );

            vec2 ocX_ds = ds_add( sGeoX_ds, neg_roX_ds );
            vec2 ocY_ds = ds_add( sGeoY_ds, neg_roY_ds );
            vec2 ocZ_ds = ds_add( sGeoZ_ds, neg_roZ_ds );

            vec2 rdX_ds = ds_set( ray.d.x );
            vec2 rdY_ds = ds_set( ray.d.y );
            vec2 rdZ_ds = ds_set( ray.d.z );

            vec2 b_ds = ds_dot3( 
                ocX_ds, ocY_ds, ocZ_ds, 
                rdX_ds, rdY_ds, rdZ_ds );
            
            vec2 sGeoW_ds = ds_set( sphere.geo.w );

            vec2 det_ds = ds_add(
                ds_sub ( // b*b-dot(oc,oc)
                    ds_mul( b_ds, b_ds ), // b*b
                    ds_dot3( ocX_ds, ocY_ds, ocZ_ds, ocX_ds, ocY_ds, ocZ_ds ) ), // dot(oc,oc)
                ds_mul( sGeoW_ds, sGeoW_ds ) );

            if ( ds_compare( det_ds, ds_set( 0.0 ) ) < 0.0 ) { continue; } 
            else {
                det_ds = ds_sqrt( det_ds ); // no ds_sqrt() - hacky, used the impl from DF64_F32_F32
                //float det_tmp = ds_get( det_ds ); det_tmp = sqrt( det_tmp ); det_ds = ds_set( det_tmp );
            }

            // float bMinusDet_f32 = ds_get( ds_sub( b_ds, det_ds ) );
            // float bPlusDet_f32 = ds_get( ds_add( b_ds, det_ds ) );
            // d = ( d = bMinusDet_f32 )>eps ? d : ( ( d = bPlusDet_f32 ) > eps ? d : inf );

            // float bMinusDet = b - det;
            // float bPlusDet  = b + det;
            // d = bMinusDet;
            // if ( d <= eps ) {
            //     d = bPlusDet;
            //     if ( d <= eps ) { d = inf; }
            // }

            vec2 eps_ds = ds_set( eps );
            vec2 bMinusDet_ds = ds_sub( b_ds, det_ds );
            vec2 bPlusDet_ds = ds_add( b_ds, det_ds );
            vec2 d_ds = bMinusDet_ds; d = ds_get( d_ds );
            if ( ds_compare( d_ds, eps_ds ) <= 0.0 ) { 
                d_ds = bPlusDet_ds; d = ds_get( d_ds );
                if ( ds_compare( d_ds, eps_ds ) <= 0.0 ) { d = inf; }
            }


            // if ( ds_compare( bMinusDet_ds, eps_ds ) > 0.0 ) { d = ds_get( bMinusDet_ds ); }
            // else if ( ds_compare( bPlusDet_ds, eps_ds ) > 0.0 ) { d = ds_get( bPlusDet_ds ); }
            // else d = inf;



        } else
    #elif ( DF64_F32_F32 == TRUE ) // perform intersection test in float-float (df64) precision - WORKS, but still lacking precision :-(
        // need double precision?
        if ( sphere.geo.w > maxLenForFloatCalc || 
            dot( sphere.geo.xyz, sphere.geo.xyz ) > maxLenForFloatCalc * maxLenForFloatCalc ||
            dot( ray.o, ray.o ) > maxLenForFloatCalc * maxLenForFloatCalc ||
            dot( sphere.geo.xyz - ray.o, sphere.geo.xyz - ray.o ) > maxLenForFloatCalc * maxLenForFloatCalc ) {

            highp vec2 sGeoX_df64 = df64_from_f32( sphere.geo.x );
            highp vec2 sGeoY_df64 = df64_from_f32( sphere.geo.y );
            highp vec2 sGeoZ_df64 = df64_from_f32( sphere.geo.z );

            highp vec2 neg_roX_df64 = df64_from_f32( -ray.o.x );
            highp vec2 neg_roY_df64 = df64_from_f32( -ray.o.y );
            highp vec2 neg_roZ_df64 = df64_from_f32( -ray.o.z );

            highp vec2 ocX_df64 = df64_add( sGeoX_df64, neg_roX_df64 );
            highp vec2 ocY_df64 = df64_add( sGeoY_df64, neg_roY_df64 );
            highp vec2 ocZ_df64 = df64_add( sGeoZ_df64, neg_roZ_df64 );

            highp vec2 rdX_df64 = df64_from_f32( ray.d.x );
            highp vec2 rdY_df64 = df64_from_f32( ray.d.y );
            highp vec2 rdZ_df64 = df64_from_f32( ray.d.z );

            highp vec2 b_df64 = df64_dot3( 
                ocX_df64, ocY_df64, ocZ_df64, 
                rdX_df64, rdY_df64, rdZ_df64 );
            
            highp vec2 sGeoW_df64 = df64_from_f32( sphere.geo.w );

            highp vec2 det_df64 = df64_add(
                df64_add ( // b*b-dot(oc,oc)
                    df64_mult( b_df64, b_df64 ), // b*b
                    df64_mult( 
                        df64_dot3( ocX_df64, ocY_df64, ocZ_df64, ocX_df64, ocY_df64, ocZ_df64 ), // dot(oc,oc)
                        df64_from_f32( -1.0 ) ) ),
                df64_mult( sGeoW_df64, sGeoW_df64 ) );

            if ( df64_lt( det_df64, df64_from_f32( 0.0 ) ) ) { continue; } else det_df64 = df64_sqrt( det_df64 );

            highp float bMinusDet_f32 = df64_to_f32( df64_add( b_df64, df64_mult( det_df64, df64_from_f32( -1.0 ) ) ) );
            highp float bPlusDet_f32 = df64_to_f32( df64_add( b_df64, det_df64 ) );
            d = ( d = bMinusDet_f32 )>eps ? d : ( ( d = bPlusDet_f32 ) > eps ? d : inf );
        } else
    #elif ( FP_64_64_R128 == TRUE )
        // need double precision?
        if ( sphere.geo.w > maxLenForFloatCalc || 
             dot( sphere.geo.xyz, sphere.geo.xyz ) > maxLenForFloatCalc * maxLenForFloatCalc ||
             dot( ray.o, ray.o ) > maxLenForFloatCalc * maxLenForFloatCalc ||
             dot( sphere.geo.xyz - ray.o, sphere.geo.xyz - ray.o ) > maxLenForFloatCalc * maxLenForFloatCalc ) {

            R128 sphereGeoX_r128; r128FromFloat( sphereGeoX_r128, sphere.geo.x );
            R128 sphereGeoY_r128; r128FromFloat( sphereGeoY_r128, sphere.geo.y );
            R128 sphereGeoZ_r128; r128FromFloat( sphereGeoZ_r128, sphere.geo.z );

            R128 rayOriginX_r128; r128FromFloat( rayOriginX_r128, ray.o.x );
            R128 rayOriginY_r128; r128FromFloat( rayOriginY_r128, ray.o.y );
            R128 rayOriginZ_r128; r128FromFloat( rayOriginZ_r128, ray.o.z );

            R128 ocX_r128; r128Sub( ocX_r128, sphereGeoX_r128, rayOriginX_r128 );
            R128 ocY_r128; r128Sub( ocY_r128, sphereGeoY_r128, rayOriginY_r128 );
            R128 ocZ_r128; r128Sub( ocZ_r128, sphereGeoZ_r128, rayOriginZ_r128 );

            R128 rayDirX_r128; r128FromFloat( rayDirX_r128, ray.d.x );
            R128 rayDirY_r128; r128FromFloat( rayDirY_r128, ray.d.y );
            R128 rayDirZ_r128; r128FromFloat( rayDirZ_r128, ray.d.z );

            R128 b_r128;
            r128Dot3( b_r128, 
                      ocX_r128, ocY_r128, ocZ_r128, 
                      rayDirX_r128, rayDirY_r128, rayDirZ_r128 );

            R128 det_r128;
            R128 bb_r128;
            r128Mul( bb_r128, b_r128, b_r128 );
            R128 dotOcOc_r128;
            r128Dot3( dotOcOc_r128, 
                      ocX_r128, ocY_r128, ocZ_r128,
                      ocX_r128, ocY_r128, ocZ_r128 );
            r128Sub( det_r128, bb_r128, dotOcOc_r128 );
            R128 sphereGeoW_r128; r128FromFloat( sphereGeoW_r128, sphere.geo.w );
            R128 sphereGeoW2_r128; r128Mul( sphereGeoW2_r128, sphereGeoW_r128, sphereGeoW_r128 );
            R128 detAdd_r128;
            r128Add( detAdd_r128, det_r128, sphereGeoW2_r128 );

            float det;
            if ( r128Cmp( detAdd_r128, R128_zero ) < 0 ) { continue; } else {

                r128Sqrt( det_r128, detAdd_r128 );

                R128 eps_r128; r128FromFloat( eps_r128, eps );
                R128 d_r128;
                r128Sub( d_r128, b_r128, det_r128 );
                if ( r128Cmp( d_r128, eps_r128 ) <= 0 ) {
                    r128Add( d_r128, b_r128, det_r128 );
                    if ( r128Cmp( d_r128, eps_r128 ) <= 0 ) {
                        r128Copy( d_r128, R128_max );
                    }
                }
                d = r128ToFloat( d_r128 );
            }
        } else 
    #endif // perform intersection test in single precision
        {
            vec3 oc = sphere.geo.xyz - ray.o;      // Solve t^2*d.d + 2*t*(o-s).d + (o-s).(o-s)-r^2 = 0 
            float b=dot(oc,ray.d), det=b*b-dot(oc,oc)+sphere.geo.w*sphere.geo.w; 
            if (det < 0) continue; else det=sqrt(det); 
            //??? d = (d = (b-det))>eps ? d : ((d=(b+det))>eps ? d : inf);

            float bMinusDet = b - det;
            float bPlusDet  = b + det;
            d = bMinusDet;
            if ( d <= eps ) {
                d = bPlusDet;
                if ( d <= eps ) { d = inf; }
            }
            //d = ( d = bMinusDet ) > eps ? d : ( ( d = bPlusDet ) > eps ? d : inf );

        }
        //if(d < t) { t=d; id = i; } 
        if(d < t) { t=d; hitInfo.objType = eSphere; hitInfo.objIdx = i; } 

    } 
    if (t < inf) {
        hitInfo.rayT = t;
        return true;
    }
    return false;
}

void main() {
    uvec2 imgdim = pushConstants.k_imgdim; 
    uvec2 samps  = pushConstants.k_samps;

    uvec2 pix = gl_GlobalInvocationID.xy;
    if (pix.x >= imgdim.x || pix.y >= imgdim.y) return;
    uint gid = (imgdim.y - pix.y - 1) * imgdim.x + pix.x;
    
    //-- define camera
    Ray cam = Ray(vec3(0, 0.52, 7.4), normalize(vec3(0, -0.06, -1)));
    vec3 cx = normalize(cross(cam.d, abs(cam.d.y)<0.9 ? vec3(0,1,0) : vec3(0,0,1))), cy = cross(cx, cam.d);
    const vec2 sdim = vec2(0.036, 0.024);    // sensor size (36 x 24 mm)
    
    //-- sample sensor
    vec2 rnd2 = 2*rand01(uvec3(pix, samps.x)).xy;   // vvv tent filter sample  
    vec2 tent = vec2(rnd2.x<1 ? sqrt(rnd2.x)-1 : 1-sqrt(2-rnd2.x), rnd2.y<1 ? sqrt(rnd2.y)-1 : 1-sqrt(2-rnd2.y));
    vec2 s = ((pix + 0.5 * (0.5 + vec2((samps.x/2)%2, samps.x%2) + tent)) / vec2(imgdim) - 0.5) * sdim;
    vec3 spos = cam.o + cx*s.x + cy*s.y, lc = cam.o + cam.d * 0.035;           // sample on 3d sensor plane
    vec3 accrad=vec3(0), accmat=vec3(1);        // initialize accumulated radiance and bxdf
    Ray ray = Ray(lc, normalize(lc - spos));      // construct ray
    
    //-- loop over ray bounces
    float emissive = 1;
    //for (int depth = 0, maxDepth = 64; depth < maxDepth; depth++) {   
    for (int depth = 0, maxDepth = 12; depth < maxDepth; depth++) {   
        HitInfo hitInfo;
        if ( !intersect( ray, hitInfo ) ) { continue; } // intersect ray with scene

        vec3 objEmissiveColor, objDiffuseColor;
        int objMaterialType;
        vec3 objIsectNormal;
        vec3 objIsectPoint = ray.o + hitInfo.rayT * ray.d;

        if ( hitInfo.objType == ePlane ) {
            Plane hitPlane = planes[ hitInfo.objIdx ];
            objMaterialType  = int( floor( hitPlane.c.w + 0.5f ) );
            objDiffuseColor  = hitPlane.c.rgb;
            objEmissiveColor = hitPlane.e.rgb;
            objIsectNormal = hitPlane.equation.xyz;
        } else if ( hitInfo.objType == eSphere ) {
            Sphere hitSphere = spheres[ hitInfo.objIdx ];
            objMaterialType  = int( floor( hitSphere.c.w + 0.5f ) );
            objDiffuseColor  = hitSphere.c.rgb;
            objEmissiveColor = hitSphere.e.rgb;
            objIsectNormal = normalize( objIsectPoint - hitSphere.geo.xyz );
        }

        vec3 nl = dot(objIsectNormal,ray.d) < 0 ? objIsectNormal : -objIsectNormal;
        accrad += accmat * objEmissiveColor * emissive;      // add emssivie term only if emissive flag is set to 1
        accmat *= objDiffuseColor;
        vec3 rnd = rand01(uvec3(pix, samps.x*maxDepth + depth));    // vector of random numbers for sampling
        float p = max(max(objDiffuseColor.x, objDiffuseColor.y), objDiffuseColor.z);  // max reflectance
        if (depth > 5) {
            if (rnd.z >= p) break;  // Russian Roulette ray termination
            else accmat /= p;       // Energy compensation of surviving rays
        }
        //-- Ideal DIFFUSE reflection
        if ( objMaterialType == eDiffuseMaterial ) { 
        //if ( true ) { // !!! DEBUG !!!
            // Direct Illumination: Next Event Estimation over any present lights
            for ( int i = 0; i < spheres.length(); i++ ) {
                Sphere ls = spheres[i];
                //if (all(equal(ls.e, vec3(0)))) continue; // skip non-emissive spheres 
                //if ( all( ls.e.xyz == vec3( 0.0 ) ) ) continue; // skip non-emissive spheres 
                if ( dot( ls.e.xyz, ls.e.xyz ) <= 0.0 ) continue; // skip non-emissive spheres 
                vec3 xls, nls, xc = ls.geo.xyz - objIsectPoint;
                vec3 sw = normalize(xc), su = normalize(cross((abs(sw.x)>.1 ? vec3(0,1,0) : vec3(1,0,0)), sw)), sv = cross(sw,su);
                float cos_a_max = sqrt(float(1 - ls.geo.w*ls.geo.w / dot(xc,xc)));
                float cos_a = 1 - rnd.x + rnd.x*cos_a_max, sin_a = sqrt(1 - cos_a*cos_a);
                float phi = 2 * pi * rnd.y;
                vec3 l = normalize(su*cos(phi)*sin_a + sv*sin(phi)*sin_a + sw*cos_a);   // sampled direction towards light
                int idls = 0; 
                // if (intersect(Ray(x,l), idls, xls, nls) && idls == i) {      // test if shadow ray hits this light source
                //     float omega = 2 * pi * (1-cos_a_max);
                //     accrad += accmat / pi * max(dot(l,nl),0) * ls.e.rgb * omega;   // brdf term obj.c.xyz already in accmat, 1/pi for brdf
                // }
                HitInfo hitInfo_ne;
                if (intersect(Ray(objIsectPoint,l), hitInfo_ne) && hitInfo_ne.objType == eSphere && hitInfo_ne.objIdx == i ) {      // test if shadow ray hits this light source
                    float omega = 2 * pi * (1-cos_a_max);
                    accrad += accmat / pi * max(dot(l,nl),0) * ls.e.rgb * omega;   // brdf term obj.c.xyz already in accmat, 1/pi for brdf
                }
            }
            // Indirect Illumination: cosine-weighted importance sampling
            float r1 = 2 * pi * rnd.x, r2 = rnd.y, r2s = sqrt(r2);
            vec3 w = nl, u = normalize((cross(abs(w.x)>0.1 ? vec3(0,1,0) : vec3(1,0,0), w))), v = cross(w,u);
            ray = Ray(objIsectPoint, normalize(u*cos(r1)*r2s + v * sin(r1)*r2s + w * sqrt(1 - r2)));
            emissive = 0;   // in the next bounce, consider reflective part only!
        } 
        //-- Ideal SPECULAR reflection
        else if ( objMaterialType == eReflectiveMaterial ) {   
            ray = Ray(objIsectPoint, reflect(ray.d,objIsectNormal));  
            emissive = 1; 
        } 
        //-- Ideal dielectric REFRACTION
        else if ( objMaterialType == eRefractiveMaterial ) {  
            bool into = ( objIsectNormal == nl );
            float cos2t, nc=1, nt=1.5, nnt = into ? nc/nt : nt/nc, ddn = dot(ray.d,nl);
            if ((cos2t = 1 - nnt * nnt*(1 - ddn * ddn)) >= 0) {     // Fresnel reflection/refraction
                vec3 tdir = normalize(ray.d*nnt - objIsectNormal * ((into ? 1 : -1)*(ddn*nnt + sqrt(cos2t))));
                float a = nt - nc, b = nt + nc, R0 = a*a/(b*b), c = 1 - (into ? -ddn : dot(tdir,objIsectNormal));
                float Re = R0 + (1 - R0)*c*c*c*c*c, Tr = 1 - Re, P = 0.25 + 0.5*Re, RP = Re/P, TP = Tr/(1-P);
                ray = Ray(objIsectPoint, rnd.x < P ? reflect(ray.d,objIsectNormal) : tdir);      // pick reflection with probability P
                accmat *=  rnd.x < P ? RP : TP;                     // energy compensation
            } else ray = Ray(objIsectPoint, reflect(ray.d,objIsectNormal));                      // Total internal reflection
            emissive = 1; 
        }
    }

    if (samps.x == 0) accRad[gid] = vec4(0);    // initialize radiance buffer
    accRad[gid] += vec4(accrad / samps.y, 0);   // <<< accumulate radiance   vvv write 8bit rgb gamma encoded color
    if (samps.x == samps.y-1) accRad[gid].xyz = pow(vec3(clamp(accRad[gid].xyz, 0, 1)), vec3(0.45)) * 255 + 0.5;

    //accRad[gid] = vec4( 255.0, 0.0, 0.0, 127.0 ); // DEBUG

    //accRad[gid] = vec4( 255.0, 127.0, 0.0, 127.5 );
}
